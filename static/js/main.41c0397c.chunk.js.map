{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/ErrorMessage/ErrorMessage.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","ErrorMessage","NewMovie","state","titleError","imgUrlError","imdbUrlError","imdbIdError","disableButton","handleChange","event","target","name","value","setState","handlValid","test","handleSubmit","preventDefault","length","props","onAdd","this","onSubmit","classNames","input__error","type","placeholder","onChange","disabled","React","Component","App","moviesFromServer","addMovie","newMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41c0397c.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport './ErrorMessage.scss';\n\nexport const ErrorMessage: React.FC = () => {\n  return (\n    <div className=\"error__message\">\n      Please, enter valid data!\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './NewMovie.scss';\nimport { ErrorMessage } from '../ErrorMessage';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\ntype State = {\n  title: string,\n  description: string,\n  imgUrl: string,\n  imdbUrl: string,\n  imdbId: string,\n  titleError: boolean,\n  imgUrlError: boolean,\n  imdbUrlError: boolean,\n  imdbIdError: boolean,\n  disableButton: boolean,\n};\n\nexport class NewMovie extends React.Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    titleError: false,\n    imgUrlError: false,\n    imdbUrlError: false,\n    imdbIdError: false,\n    disableButton: false,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      ...state,\n      [name]: value,\n    }));\n\n    this.handlValid(name, value);\n  };\n\n  handlValid = (name: string, value: string) => {\n    /* eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }] */\n    const validUrl = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    if (value === '') {\n      if (name === 'title') {\n        this.setState({\n          titleError: true,\n          disableButton: true,\n        });\n      }\n\n      if (name === 'imdbId') {\n        this.setState({\n          imdbIdError: true,\n          disableButton: true,\n        });\n      }\n    } else {\n      this.setState({\n        titleError: false,\n        imdbIdError: false,\n        disableButton: false,\n      });\n    }\n\n    if (!validUrl.test(value)) {\n      if (name === 'imgUrl') {\n        this.setState({\n          imgUrlError: true,\n          disableButton: true,\n        });\n      }\n\n      if (name === 'imdbUrl') {\n        this.setState({\n          imdbUrlError: true,\n          disableButton: true,\n        });\n      }\n    } else {\n      this.setState({\n        imgUrlError: false,\n        imdbUrlError: false,\n        disableButton: false,\n      });\n    }\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    const {\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    event.preventDefault();\n\n    const movie = {\n      title: this.state.title,\n      description: this.state.description,\n      imgUrl: this.state.imgUrl,\n      imdbUrl: this.state.imdbUrl,\n      imdbId: this.state.imdbId,\n    };\n\n    if (title.length > 0\n      && imgUrl.length > 0\n      && imdbUrl.length > 0\n      && imdbId.length > 0\n    ) {\n      this.props.onAdd(movie);\n\n      this.setState({\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n        titleError: false,\n        imgUrlError: false,\n        imdbUrlError: false,\n        imdbIdError: false,\n        disableButton: false,\n      });\n    } else {\n      this.setState({\n        disableButton: true,\n      });\n    }\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      titleError,\n      imgUrlError,\n      imdbUrlError,\n      imdbIdError,\n      disableButton,\n    } = this.state;\n\n    return (\n      <>\n        <h2>Add a new film!</h2>\n\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className={classNames('input', { input__error: titleError })}\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => {\n              this.handleChange(event);\n            }}\n          />\n          {titleError && <ErrorMessage />}\n          <input\n            className=\"input\"\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Enter a description\"\n            value={description}\n            onChange={this.handleChange}\n          />\n          <input\n            className={classNames('input', { input__error: imgUrlError })}\n            type=\"text\"\n            name=\"imgUrl\"\n            placeholder=\"Enter a image's url\"\n            value={imgUrl}\n            onChange={this.handleChange}\n          />\n          {imgUrlError && <ErrorMessage />}\n          <input\n            className={classNames('input', { input__error: imdbUrlError })}\n            type=\"text\"\n            name=\"imdbUrl\"\n            placeholder=\"Enter imdbUrl\"\n            value={imdbUrl}\n            onChange={this.handleChange}\n          />\n          {imdbUrlError && <ErrorMessage />}\n          <input\n            className={classNames('input', { input__error: imdbIdError })}\n            type=\"text\"\n            name=\"imdbId\"\n            placeholder=\"Enter imdbId\"\n            value={imdbId}\n            onChange={this.handleChange}\n          />\n          {imdbIdError && <ErrorMessage />}\n          <button type=\"submit\" className=\"button\" disabled={disableButton}>\n            Add\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(state => {\n      const newMovie = {\n        title: movie.title,\n        description: movie.description,\n        imgUrl: movie.imgUrl,\n        imdbUrl: movie.imdbUrl,\n        imdbId: movie.imdbId,\n      };\n\n      return {\n        movies: [...state.movies, newMovie],\n      };\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}